[{"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/index.js":"1","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/reportWebVitals.js":"2","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/App.js":"3","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/contexts/ThemeContext.js":"4","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/data/populatedb.js":"5","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/pages/NewRecipePage.js":"6","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/pages/RecipePage.js":"7","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/pages/HomePage.js":"8","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/pages/NewIngredientPage.js":"9","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/ThemeToggle.js":"10","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/data/ingredients.js":"11","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/data/recipes.js":"12","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/FormPageNavBar.js":"13","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/UpdateRecipeForm.js":"14","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/RecipeForm.js":"15","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/CardList.js":"16","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/NavBar.js":"17","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/IngredientForm.js":"18","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/AddNewButton.js":"19","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/Card.js":"20","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/PopulateDBbutton.js":"21","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/adapters/recipeAdapter.js":"22"},{"size":597,"mtime":1649404796889,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1649378159590,"results":"25","hashOfConfig":"24"},{"size":1658,"mtime":1649404821695,"results":"26","hashOfConfig":"24"},{"size":602,"mtime":1649404859212,"results":"27","hashOfConfig":"24"},{"size":472,"mtime":1649404865111,"results":"28","hashOfConfig":"24"},{"size":769,"mtime":1649404875601,"results":"29","hashOfConfig":"24"},{"size":3001,"mtime":1649404877868,"results":"30","hashOfConfig":"24"},{"size":7761,"mtime":1649404869589,"results":"31","hashOfConfig":"24"},{"size":792,"mtime":1649404872013,"results":"32","hashOfConfig":"24"},{"size":978,"mtime":1649404852221,"results":"33","hashOfConfig":"24"},{"size":1433,"mtime":1649404862687,"results":"34","hashOfConfig":"24"},{"size":5251,"mtime":1649404867053,"results":"35","hashOfConfig":"24"},{"size":546,"mtime":1649407891359,"results":"36","hashOfConfig":"24"},{"size":5316,"mtime":1649407927524,"results":"37","hashOfConfig":"24"},{"size":4640,"mtime":1649404850447,"results":"38","hashOfConfig":"24"},{"size":809,"mtime":1649404838251,"results":"39","hashOfConfig":"24"},{"size":3675,"mtime":1649407910159,"results":"40","hashOfConfig":"24"},{"size":1321,"mtime":1649404842823,"results":"41","hashOfConfig":"24"},{"size":1201,"mtime":1649404834330,"results":"42","hashOfConfig":"24"},{"size":2632,"mtime":1649407499330,"results":"43","hashOfConfig":"24"},{"size":280,"mtime":1649407503583,"results":"44","hashOfConfig":"24"},{"size":2058,"mtime":1649416338815,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1w9uu09",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"49"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"49"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"49"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"49"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/index.js",[],[],["120","121"],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/reportWebVitals.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/App.js",["122","123","124"],[],"import './App.css';\nimport HomePage from './pages/HomePage';\nimport NewRecipePage from './pages/NewRecipePage';\nimport NewIngredientPage from './pages/NewIngredientPage';\nimport ThemeToggle from './components/ThemeToggle';\nimport React, { useEffect, useContext } from \"react\";\nimport { ThemeContext } from \"./contexts/ThemeContext\";\nimport {BrowserRouter, Routes, Route} from 'react-router-dom';\n//import NavBar from './components/NavBar';\n\nimport {postIngredients, postRecipes} from './data/populatedb.js'\nimport RecipePage from './pages/RecipePage';\n\n\n\nfunction App() {\n  const theme = useContext(ThemeContext);\n  const darkMode = theme.state.darkMode;\n\n  useEffect(() => {\n    if (darkMode) {\n      document.body.classList.add(\"bg-dark\");\n      document.body.classList.remove(\"bg-light\");\n    } else {\n      document.body.classList.add(\"bg-light\");\n      document.body.classList.remove(\"bg-dark\");\n    }\n  });\n\n  return (\n\n    <BrowserRouter>\n      <div className={`App ${darkMode ? \"app-dark\" : \"app-light\"}`}>\n        <header className=\"App-header\">\n          {/* <HomePage />\n          <ThemeToggle /> */}\n\n        </header>\n        \n        <Routes>\n          <Route path = \"/\" element={<HomePage />} />\n          <Route path = \"/NewRecipePage\" element = {<NewRecipePage />} />\n          <Route path = \"/NewIngredientPage\" element = {<NewIngredientPage />} />\n          <Route path=\"/recipe/:id\" element={<RecipePage />} />\n        </Routes>\n\n        {/* <button onClick={postIngredients}>post ingredients</button> */}\n        {/* <button onClick={postRecipes}>post recipes</button> */}\n\n      </div>\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/contexts/ThemeContext.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/data/populatedb.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/pages/NewRecipePage.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/pages/RecipePage.js",["125"],[],"import { getRecipeById } from \"../adapters/recipeAdapter\"\nimport { useParams } from \"react-router\";\nimport { useState, useEffect } from \"react\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport FormPageNavBar from \"../components/FormPageNavBar\";\nimport \"../App.css\"\n\nimport UpdateRecipeForm from \"../components/UpdateRecipeForm\";\nimport { useContext } from 'react';\nimport { ThemeContext } from '../contexts/ThemeContext';\nimport vegetarianIcon from \"../images/vegetarianIcon.png\"\nimport veganIcon from \"../images/veganIcon.png\"\nimport pescatarianIcon from \"../images/pescatarianIcon.png\"\nimport meatOnlyIcon from \"../images/meatOnlyIcon.png\"\n\n\nconst RecipePage = (props) => {\n\n    const { id } = useParams();\n    const [recipe, setRecipe] = useState(null)\n    const [showUpdateForm, setShowUpdateForm] = useState(false)\n\n    const theme = useContext(ThemeContext);\n    const darkMode = theme.state.darkMode;\n\n    useEffect(() => {\n        getRecipeById(id).then(r => setRecipe(r))\n\n    }, [])\n\n    let navigate = useNavigate();\n    const goHome = () => {\n        navigate(\"/\");\n    }\n\n\n    const updateForm = () => {\n        setShowUpdateForm(true);\n    }\n\n    return (\n        recipe ?\n\n\n            <>\n\n                <FormPageNavBar goHome={goHome} />\n                <div className={`recipe-page ${darkMode ? \"rec-pg-dark\" : \"rec-pg-light\"}`}>\n\n                    <h1>{recipe.name}</h1>\n                    <h3>{`Cuisine: ${recipe.cuisine}`}</h3>\n                    <h3>{`Spice Level: ${recipe.spiceRating}`}</h3>\n                    <h3>{`Cooking Time: ${recipe.cookingTime} minutes`}</h3>\n                    <h3>{`Meal Type: ${recipe.mealType}`}</h3>\n                    <div className=\"recipe-icon-block\">\n          {recipe.vegetarian ? \n          <img src={vegetarianIcon} alt=\"vegetarian\" className=\"icon\"/>\n          :\n          <>\n          </>\n        }\n          {recipe.vegan ? \n          <img src={veganIcon} alt=\"Vegan Icon\" className=\"icon\"/>\n           :\n           <>\n           </>\n          }\n          {recipe.pescatarian ? \n          <img src={pescatarianIcon} alt=\"Pescatarian Icon\" className=\"icon\"/>\n          :\n          <>\n          </>\n         }\n          {recipe.meatOnly ?\n          <img src={meatOnlyIcon} alt=\"Meat Icon\" className=\"icon\"/>\n          :\n          \n          <></>}\n        \n      </div>\n                    <div className=\"cooking-instructions\">\n                        <h2>Instructions</h2>\n                        <p><span className=\"recipe-instructions\">{recipe.instructions}</span></p>\n                    </div>\n\n                    <button onClick={updateForm} id=\"recipeButton\">Update Recipe</button>\n                </div>\n\n\n                {showUpdateForm ?\n                    <>\n                        <UpdateRecipeForm recipe={recipe} />\n                    </>\n                    :\n                    <>\n                    </>}\n            </>\n            :\n            <p>Loading...</p>\n    )\n}\n\nexport default RecipePage;","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/pages/HomePage.js",["126","127","128"],[],"import \"../adapters/recipeAdapter\"\nimport {useState, useEffect, useContext} from \"react\"\nimport {getAllRecipes} from \"../adapters/recipeAdapter\"\nimport CardList from \"../components/CardList\"\nimport NavBar from \"../components/NavBar\"\nimport {useNavigate} from \"react-router-dom\";\nimport AddNewButton from \"../components/AddNewButton\"\nimport PopulateDBbutton from \"../components/PopulateDBbutton\"\nimport { ThemeContext } from \"../contexts/ThemeContext\";\n\nconst HomePage = () => {\n    const [recipes, setRecipes] = useState(null);\n    const [input, setInput] = useState(\"\");\n    const [recipesFiltered, setRecipesFiltered] = useState([]);\n\n    useEffect(()=>{\n        getAllRecipes().then(response => setRecipes(response))}, [])\n\n    const searchChange = (s) => {\n        console.log(s.target.value)\n        setInput(s.target.value)\n        setRecipesFiltered(\"\");\n    };\n\n    const sortRecipes = \n    recipes ?\n    recipes.sort((x, y) => {return (x.favourites === y.favourite)? 0 : x? -1 : 1;})\n    :\n    null;\n\n    const filteredRecipes = \n    recipes ?\n        sortRecipes.filter((recipes)=> {\n            return recipes.name.toLowerCase().includes(input.toLowerCase());\n        })\n        :\n        null;\n\n        const filteredToBreakFast = () => { \n   \n            const newRecipes = recipes.filter((recipes)=> { return recipes.mealType.toLowerCase().includes(\"breakfast\") })\n            setRecipesFiltered(newRecipes);\n            console.log(recipesFiltered.id);\n        }\n    \n        const filteredToLunch = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.mealType.toLowerCase().includes(\"lunch\") })\n            setRecipesFiltered(newRecipes);\n        }\n    \n        const filteredToDinner = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.mealType.toLowerCase().includes(\"dinner\") })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredToSnack = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.mealType.toLowerCase().includes(\"snack\") })\n            setRecipesFiltered(newRecipes);\n        }\n    \n        const filteredToDessert = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.mealType.toLowerCase().includes(\"dessert\") })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredToVegetarian = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.vegetarian })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredToVegan = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.vegan })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredToMeatOnly = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.meatOnly })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredToPescatarian = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.pescatarian })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredToHot = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.spiceRating.toLowerCase().includes(\"hot\") })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredToMedium = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.spiceRating.toLowerCase().includes(\"medium\") })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredToMild = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.spiceRating.toLowerCase().includes(\"mild\") })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredToSweet = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.spiceRating.toLowerCase().includes(\"sweet\") })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredTo30mins = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.cookingTime < 31 })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredToHour = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.cookingTime < 61 })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const filteredToOverHour = () => { \n       \n            const newRecipes = recipes.filter((recipes)=> { return recipes.cookingTime > 61 })\n            setRecipesFiltered(newRecipes);\n        }\n\n        const goHome = () => {\n            setRecipesFiltered(\"\");\n        }\n\n        const recipesToShow = recipesFiltered.length > 0 ? recipesFiltered : filteredRecipes;  \n\n    let navigate = useNavigate();\n\n    const goNewRecipePage = () => {\n        navigate(\"/NewRecipePage\")\n    }\n\n    const goNewIngredientPage = () => {\n        navigate(\"/NewIngredientPage\")\n    }\n    \n    const addToFaves = (id) => {\n        const findRecipe = recipes.find(recipes => recipes.id === id);\n        findRecipe.favourites = true;\n        const updateRecipes = [...recipes];\n        setRecipes(updateRecipes);\n    };\n\n    const removeFromFaves = (id) => {\n        const findRecipe = recipes.find(recipes => recipes.id === id);\n        findRecipe.favourites = false;\n        const updateRecipes = [...recipes];\n        setRecipes(updateRecipes);\n    };\n\n    const filteredToFaves= () => {   \n        const newRecipes = recipes.filter((recipes)=> { return recipes.favourites })\n        setRecipesFiltered(newRecipes);\n    }\n\n    const darkTheme = useContext(ThemeContext);\n    const darkMode = darkTheme.state.darkMode;\n\n    return (\n        recipes ?\n        <>\n            <NavBar goHome={goHome} searchChange={searchChange} value={input} filteredToBreakFast={filteredToBreakFast} \n            filteredToLunch={filteredToLunch} filteredToDinner={filteredToDinner} filteredToSnack={filteredToSnack} \n            filteredToDessert={filteredToDessert} filteredToVegetarian={filteredToVegetarian} filteredToVegan={filteredToVegan} \n            filteredToMeatOnly={filteredToMeatOnly} filteredToPescatarian={filteredToPescatarian} filteredToHot={filteredToHot}\n            filteredToMedium={filteredToMedium} filteredToMild={filteredToMild} filteredToSweet={filteredToSweet}\n            filteredTo30mins={filteredTo30mins} filteredToHour={filteredToHour} filteredToOverHour={filteredToOverHour}\n            filteredToFaves={filteredToFaves} />\n            <h1 className={`homepage-title ${darkMode ? \"homepage-title-dark\" : \"homepage-title-light\"}`}>All Recipes</h1>\n            <CardList recipes={recipesToShow} addToFaves={addToFaves} removeFromFaves={removeFromFaves}/>\n            {/* <PopulateDBbutton/> */}\n            <AddNewButton />\n        </>\n\n        :\n        <>\n        <NavBar goHome={goHome} searchChange={searchChange} value={input} filteredToBreakFast={filteredToBreakFast} \n            filteredToLunch={filteredToLunch} filteredToDinner={filteredToDinner} filteredToSnack={filteredToSnack} \n            filteredToDessert={filteredToDessert} filteredToVegetarian={filteredToVegetarian} filteredToVegan={filteredToVegan} \n            filteredToMeatOnly={filteredToMeatOnly} filteredToPescatarian={filteredToPescatarian} filteredToHot={filteredToHot}\n            filteredToMedium={filteredToMedium} filteredToMild={filteredToMild} filteredToSweet={filteredToSweet}\n            filteredTo30mins={filteredTo30mins} filteredToHour={filteredToHour} filteredToOverHour={filteredToOverHour}/>\n            // <PopulateDBbutton/>\n        <p>Loading...</p>\n        </>\n    )\n}\nexport default HomePage;","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/pages/NewIngredientPage.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/ThemeToggle.js",["129","130"],[],"import React, { useState, useEffect, useContext } from \"react\";\nimport '../styles/ThemeToggle.css'\nimport { ThemeContext } from '../contexts/ThemeContext'\n\nconst ThemeToggle = () => {\n\n    const theme = useContext(ThemeContext);\n    const darkMode = theme.state.darkMode;\n    //const [toggled, setToggled] = useState(true)\n\n    const swapMode = (e) => {\n        let isChecked = e.target.checked;\n        if (isChecked){\n            theme.dispatch({type: \"DARKMODE\"})\n            //setToggled(true)\n            \n        }\n        else{\n            theme.dispatch({type: \"LIGHTMODE\"})\n            //setToggled(false)\n            \n        }\n    }\n\n    return (\n        <div>\n            <label className=\"switch\">\n                <input className=\"dark-mode-check\"type=\"checkbox\" onChange={swapMode} checked={darkMode}/>\n                <span className=\"slider round\"></span>\n                <p>Dark mode</p>\n            </label>\n        </div>\n    )\n}\n\nexport default ThemeToggle;","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/data/ingredients.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/data/recipes.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/FormPageNavBar.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/UpdateRecipeForm.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/RecipeForm.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/CardList.js",["131"],[],"import Card from \"./Card\";\nimport '../styles/CardList.css'\n\nconst CardList = ({recipes, addToFaves, removeFromFaves}) => {\n    const recipeList = recipes\n\n    const recipeComponents = recipes.map(recipe => {\n        return (\n        <Card \n            name={recipe.name} \n            key={recipe.id} \n            id={recipe.id}\n            isVegan={recipe.vegan} \n            isVegetarian={recipe.vegetarian}\n            isMeatOnly={recipe.meatOnly}\n            isPescatarian={recipe.pescatarian}\n            favourites={recipe.favourites}\n            className=\"recipeCard\"\n\n            addToFaves={addToFaves}\n            removeFromFaves={removeFromFaves}\n\n\n        />\n    )})\n\n\n    return (\n        <div className=\"cardList\" >\n            {recipeComponents}\n        </div>\n    )\n\n}\n\nexport default CardList","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/NavBar.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/IngredientForm.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/AddNewButton.js",["132"],[],"import { useState, useEffect } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport \"../styles/AddNewButton.css\"\n\nconst AddNewButton = (props) => {\n\n    const [ AddNewButtonState, SetAddNewButtonState ]= useState (\"closed\")\n\n    const handleClick = () => {\n        AddNewButtonState === \"closed\" ?\n        SetAddNewButtonState(\"open\")\n        :\n        SetAddNewButtonState(\"closed\")\n    }\n\n    let navigate = useNavigate()\n    const goNewRecipePage = () => {\n        navigate(\"/NewRecipePage\")\n    }\n\n    const goNewIngredientPage = () => {\n        navigate(\"/NewIngredientPage\")\n    }\n\n    return(\n        \n        AddNewButtonState === \"closed\" ?\n        <div className=\"addButtonDiv\">\n            <button onClick={handleClick} className=\"plusButton\">+</button>\n            </div>\n        :\n        <div className=\"addButtonDiv\">\n            <button onClick = {goNewRecipePage} className=\"addRecipe\">Add New Recipe</button>\n            <button onClick = {goNewIngredientPage} className=\"addIngredient\">Add New Ingredient</button>\n            <button onClick={handleClick} className=\"plusButton\">-</button>\n\n            \n\n            </div>\n\n      \n    )\n}\n\nexport default AddNewButton","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/Card.js",["133","134"],[],"import \"../styles/Card.css\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { AiFillStar } from \"react-icons/ai\";\nimport { AiOutlineStar } from \"react-icons/ai\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport { useNavigate } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport food_placeholder from \"../images/food_placeholder.png\"\nimport vegetarianIcon from \"../images/vegetarianIcon.png\"\nimport veganIcon from \"../images/veganIcon.png\"\nimport pescatarianIcon from \"../images/pescatarianIcon.png\"\nimport meatOnlyIcon from \"../images/meatOnlyIcon.png\"\n\nconst Card = ({\n  name,\n  id,\n  isVegan,\n  isVegetarian,\n  isMeatOnly,\n  isPescatarian,\n  addToFaves,\n  removeFromFaves,\n  favourites,\n}) => {\n  const darkTheme = useContext(ThemeContext);\n  const darkMode = darkTheme.state.darkMode;\n\n  const [theme, setTheme] = useState(\"\");\n\n  useEffect(() => {\n    if (isVegan) {\n      //console.log(\"vegan\")\n      setTheme(\"card-vegan\");\n    } else if (isVegetarian) {\n      setTheme(\"card-vegetarian\");\n    } else if (isPescatarian) {\n      setTheme(\"card-pesc\");\n    } else if (isMeatOnly) {\n      setTheme(\"card-meat\");\n    }\n  }, [isVegan, isVegetarian, isMeatOnly, isPescatarian]);\n\n  let navigate = useNavigate();\n\n  return (\n    <div className={`card ${theme} ${darkMode ? \"card-dark\" : \"card-light\"}`}>\n      {favourites == true ? (\n        <button onClick={() => removeFromFaves(id)}>\n          <AiFillStar />\n        </button>\n      ) : (\n        <button onClick={() => addToFaves(id)}>\n          <AiOutlineStar />\n        </button>\n      )}\n      <Link to={{ pathname: `/recipe/${id}` }}>\n        <div className=\"link-to-recipe\">\n          {/* <img src={props.image} alt={props.alt}/> */}\n          <img className =\"food-image\" src={food_placeholder} alt=\"placeholder\"/>\n          <p>{name}</p>\n          {/* <p>Some description</p> */}\n\n          <div className=\"recipe-icon-block\">\n          {isVegetarian ? \n          <img src={vegetarianIcon} alt=\"vegetarian\" className=\"icon\"/>\n          :\n          <>\n          </>\n        }\n          {isVegan ? \n          <img src={veganIcon} alt=\"Vegan Icon\" className=\"icon\"/>\n           :\n           <>\n           </>\n          }\n          {isPescatarian ? \n          <img src={pescatarianIcon} alt=\"Pescatarian Icon\" className=\"icon\"/>\n          :\n          <>\n          </>\n         }\n          {isMeatOnly ?\n          <img src={meatOnlyIcon} alt=\"Meat Icon\" className=\"icon\"/>\n          :\n          \n          <></>}\n        \n      </div>\n        </div>\n        \n      </Link>\n      \n    </div>\n  );\n};\n\nexport default Card;","/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/components/PopulateDBbutton.js",[],[],"/Users/yonisabdulahi/Desktop/cheffers/cheffers_frontend/src/adapters/recipeAdapter.js",[],[],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":5,"column":8,"nodeType":"141","messageId":"142","endLine":5,"endColumn":19},{"ruleId":"139","severity":1,"message":"143","line":11,"column":9,"nodeType":"141","messageId":"142","endLine":11,"endColumn":24},{"ruleId":"139","severity":1,"message":"144","line":11,"column":26,"nodeType":"141","messageId":"142","endLine":11,"endColumn":37},{"ruleId":"145","severity":1,"message":"146","line":30,"column":8,"nodeType":"147","endLine":30,"endColumn":10,"suggestions":"148"},{"ruleId":"139","severity":1,"message":"149","line":144,"column":11,"nodeType":"141","messageId":"142","endLine":144,"endColumn":26},{"ruleId":"139","severity":1,"message":"150","line":148,"column":11,"nodeType":"141","messageId":"142","endLine":148,"endColumn":30},{"ruleId":"151","severity":1,"message":"152","line":197,"column":122,"nodeType":"153","messageId":"154","endLine":198,"endColumn":16},{"ruleId":"139","severity":1,"message":"155","line":1,"column":17,"nodeType":"141","messageId":"142","endLine":1,"endColumn":25},{"ruleId":"139","severity":1,"message":"156","line":1,"column":27,"nodeType":"141","messageId":"142","endLine":1,"endColumn":36},{"ruleId":"139","severity":1,"message":"157","line":5,"column":11,"nodeType":"141","messageId":"142","endLine":5,"endColumn":21},{"ruleId":"139","severity":1,"message":"156","line":1,"column":20,"nodeType":"141","messageId":"142","endLine":1,"endColumn":29},{"ruleId":"139","severity":1,"message":"158","line":43,"column":7,"nodeType":"141","messageId":"142","endLine":43,"endColumn":15},{"ruleId":"159","severity":1,"message":"160","line":47,"column":19,"nodeType":"161","messageId":"162","endLine":47,"endColumn":21},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'ThemeToggle' is defined but never used.","Identifier","unusedVar","'postIngredients' is defined but never used.","'postRecipes' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["165"],"'goNewRecipePage' is assigned a value but never used.","'goNewIngredientPage' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces","'useState' is defined but never used.","'useEffect' is defined but never used.","'recipeList' is assigned a value but never used.","'navigate' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},"Update the dependencies array to be: [id]",{"range":"168","text":"169"},[997,999],"[id]"]